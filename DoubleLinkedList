#include <bits/stdc++.h>
using namespace std;

class Node{
    
    public:
    int val;
    Node* prev;
    Node* next;
    
    Node(int data){
        val=data;
        prev=nullptr;
        next=nullptr;
    }
};

class DoubleLinkedList{
  
  public:
  Node* head;
  Node* tail;
  
  DoubleLinkedList(){
      head=nullptr;
      tail=nullptr;
  }
  
  void display(){
      Node* temp=head;
      while(temp){
          cout<<temp->val<<"<=>";
          temp=temp->next;
      }
      cout<<"NUll"<<endl;
  }
  
  void insertatstart(int data){
      Node* new_node = new Node(data);
      
      if(head==NULL){
          head=new_node;
          tail=new_node;
          return;
      }
      
      new_node->next=head;
      head->prev=new_node;
      head=new_node;
      return;
  }
  
  
  void insertatend(int data){
      Node* new_node=new Node(data);
      
      
      if(tail==nullptr){
          head=new_node;
          tail=new_node;
          return;
      }
      
      new_node->prev=tail;
      tail->next=new_node;
      tail=new_node;
      return;
  }
  
  void insertatk(int data,int k){
      Node* new_node=new Node(data);
      
      Node* temp=head;
      int count=1;
      while(count<(k-1)){
          temp=temp->next;
          count++;
        }
        
        
        new_node->next=temp->next;
        temp->next=new_node;
        new_node->prev=temp;
        temp->next->prev=new_node;
        return;
    }
    
    void deleteatstart(){
    if(head == nullptr){
        return;
    }
    
    Node* temp = head;
    head = head->next;
    
    if(head == nullptr){
        tail = nullptr;
    }
    else{
        head->prev = nullptr;
    }

    delete temp;  // Use delete instead of free if nodes are allocated with new
    return;
}

void deleteatend(){
    if(tail == nullptr){
        return;
    }
    
    Node* temp = tail;
    tail = tail->prev;
    
    if(tail == nullptr){
        head = nullptr;
    }
    else{
        tail->next = nullptr;
    }

    delete temp;  // Use delete instead of free if nodes are allocated with new
    return;
}

void deleteatk(int k){
    Node* temp=head;
    int count=1;
    while(count<(k-1)){
        temp=temp->next;
        count++;
    }
    
    Node* deleteNode = temp->next;
    temp->next=deleteNode->next;
    deleteNode->prev=temp;
    
    delete deleteNode;
    return;
}
};

void revesell(Node* &head,Node* &tail){
    Node* curr=head;
    
    
    while(curr){
        Node* next=curr->next;
        curr->next=curr->prev;
        curr->prev=next;
        curr=next;
    }
    Node* newhead=tail;
    tail=head;
    head=newhead;
}

bool palindromell(Node* head,Node* tail){
    
    while(head!=tail and tail!=head->prev){
        if(head->val!=tail->val){
            return false;
        }
        head=head->next;
        tail=tail->prev;
    }
    return true;
}

void deleteneighbor(Node* &head,Node* &tail){
    Node* curr=tail->prev;
    
    while(curr!=head){
        Node* prev=curr->prev;
        Node* next=curr->next;
        
        if(prev->val==next->val){
            prev->next=next;
            next->prev=prev;
            free(curr);
        }
        curr=prev;
    }
}

int main(){
    DoubleLinkedList ll;
    
    ll.insertatend(1);
    ll.insertatend(2);
    ll.insertatend(1);
    ll.insertatend(2);
    ll.insertatend(1);
    ll.display();
    //ll.insertatk(5,4);
     
    //ll.deleteatk(3);
    //revesell(ll.head,ll.tail);
    //cout<<palindromell(ll.head,ll.tail)<<" ";
    deleteneighbor(ll.head,ll.tail);
    ll.display();
    
    
    return 0;
}
